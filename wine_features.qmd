---
title: "Wine Features"
author: "Nicole Rodgers"
date: "02/03/2025"

format: 
  html:
    embed-resources: true
---

**Author:**

Nicole Rodgers


**Abstract:**

This is a technical blog post of **both** an HTML file *and* [.qmd file](src/wine_features.qmd) hosted on GitHub pages.


**Step Up Code:**
```{r}
library(tidyverse)
library(caret)
library(fastDummies)
wine <- readRDS(gzcon(url("https://github.com/cd-public/D505/raw/master/dat/wine.rds")))
```

**Explanation:**

> <span style="color:red;font-weight:bold"></span> Lines 1-3 load the 'Tidyverse', 'Caret', and 'FastDummies' libraries. </br>
Line 2 creates the dataset, ‘wine’, by downloading the ‘wine.rds’ file from Github, decompressing it with gzcon(), then reading it with readRDS()

# Feature Engineering

We begin by engineering an number of features.

1. Create a total of 10 features (including points). 
2. Remove all rows with a missing value. 
3. Ensure only log(price) and engineering features are the only columns that remain in the `wino` dataframe.

```{r}
wino <- wine %>%
  drop_na() %>%
  mutate(lprice = log(price)) %>%
  mutate(region = fct_lump(region_1, 3)) %>%
  mutate(variety = fct_lump(variety, 3)) %>%
  mutate(winery = fct_lump(winery, 3)) %>%
  select(lprice, region, variety, winery)
```

# Caret

We now use a train/test split to evaluate the features.

1. Use the Caret library to partition the wino dataframe into an 80/20 split. 
2. Run a linear regression with bootstrap resampling. 
3. Report RMSE on the test partition of the data.

```{r}
wine_index <- createDataPartition(wino$lprice, p = 0.8, list = FALSE)
wino_tr <- wino[wine_index, ]
wino_te <- wino[-wine_index, ]
summary(wino_tr)

m1 <- train(lprice ~ .,
  data = wino_tr,
  method = "lm",
  trControl = trainControl(method = "boot", number = 100)
)

m1

postResample(pred = predict(m1, wino_te), obs = wino_te$lprice)
```

# Variable selection

We now graph the importance of your 10 features.

```{r}
do_training <- function(df, formula) {
  train(formula,
    data = df,
    method = "lm",
    trControl = trainControl(method = "boot", number = 100)
  )
}

m2 <- do_training(
  wino_tr, lprice ~ .
)

plot(varImp(m2, scale = TRUE))
```