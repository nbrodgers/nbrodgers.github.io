---
title: $K$NN
author: "Nicole Rodgers"
date: "02/10/2025"

format: 
  html:
    theme: minty  
    mainfont: monospace
    highlight-style: github
    title-block-banner: true
    embed-resources: true
---

**Abstract:**

This is a technical blog post of **both** an HTML file *and* [.qmd file](https://raw.githubusercontent.com/cd-public/D505/refs/heads/master/hws/src/knn.qmd) hosted on GitHub pages.


# 1. Setup

```{r}
library(tidyverse)
library(moderndive)
library(class)
library(caret)
library(fastDummies)
wine <- readRDS(gzcon(url("https://github.com/cd-public/D505/raw/master/dat/pinot.rds")))
```

## 2. $K$NN Concepts

> [TODO]{style="color:red;font-weight:bold"}: *A K that is too low will result in false matches because there isn't enough information to get an accurate prediction. A K that is too high can also result in false matches if there's too much noise and the true match is drowned out. Lastly, an even-numbered K can result in a tie with no match.*

## 3. Feature Engineering

1.  Create a version of the year column that is a *factor* (instead of numeric).
2.  Create dummy variables that indicate the presence of "cherry", "chocolate" and "earth" in the description.

-   Take care to handle upper and lower case characters.

3.  Create 3 new features that represent the interaction between *time* and the cherry, chocolate and earth inidicators.
4.  Remove the description column from the data.

```{r}
ds_wine <- wine %>%
  mutate(f_year = as.factor(year)) %>%
  mutate(cherry = as.integer(str_detect(description,"[Cc]herry"))) %>%
  mutate(chocolate = as.integer(str_detect(description,"[Cc]hocolate"))) %>%
  mutate(earth = as.integer(str_detect(description,"[Ea]rth"))) %>%
  mutate(y_cherry = cherry * year) %>%
  mutate(y_chocolate = chocolate * year) %>%
  mutate(y_earth = earth * year) %>%
  select(-description)
```

## 4. Preprocessing

1.  Preprocess the dataframe from the previous code block using BoxCox, centering and scaling of the numeric features
2.  Create dummy variables for the `year` factor column

```{r}
ds_wine <- ds_wine %>% 
  preProcess(method = c("BoxCox","center","scale")) %>%
  predict(ds_wine) %>%
  dummy_cols(
    select_columns = c("f_year"),
    remove_most_frequent_dummy = T, 
    remove_selected_columns = T)
```

## 5. Running $K$NN

1.  Split the dataframe into an 80/20 training and test set
2.  Use Caret to run a $K$NN model that uses our engineered features to predict province

-   use 5-fold cross validated subsampling
-   allow Caret to try 15 different values for $K$

3.  Display the confusion matrix on the test data

```{r}
set.seed(505)
dswine_index <- createDataPartition(ds_wine$province, p = 0.8, list = FALSE)
train <- ds_wine[ dswine_index, ]
test <- ds_wine[-dswine_index, ]

fit <- train(province ~ .,
             data = train, 
             method = "knn",
             tuneLength = 15,
             trControl = trainControl(method = "cv", number = 5))

confusionMatrix(predict(fit, test),factor(test$province))
```

## 6. Kappa

How do we determine whether a Kappa value represents a good, bad or some other outcome?

> [TODO]{style="color:red;font-weight:bold"}: *We have a group of ranges that we refer to where < 0.2 is worse, ~ 0.5 is midling and > 0.8 is fantastic.*

## 7. Improvement

How can we interpret the confusion matrix, and how can we improve in our predictions?

> [TODO]{style="color:red;font-weight:bold"}: *The model has a low kappa of 0.38 and is therefore, unreliable. There are a lot of wines in Oregon and California that are placed in the wrong region and this is likely because the two are close together and the wines are similar. There are some regions (Casablanca_Valley and New_York) that have few to no matches. We also know from previous analysis that there are significantly more California wines than wines from other regions. A dataset with a more balanced selection of regions would probably yield more accurate results because as it stands, if you choose California for any given wine, chances are, you're right.*
